#include <WiFi.h>

//hotspot del celular
const char* ssid = "Vivi";
const char* password = "vivi1193";

// Pines de los motores
const int motor1Pin = 1;
const int motor2Pin = 3;
const int motor3Pin = 2;

// Variables globales
int pwm = 0;
unsigned long duracionTotal = 0;
int tiempoPorMotor = 2500;
bool nuevaSecuencia = false;
volatile bool detener = false;

WiFiServer server(80);

// Variables para manejo de secuencia
unsigned long ultimaAccion = 0;
int etapaMotor = 0;
int repeticionesTotales = 0;
int repeticionesActuales = 0;
bool ejecutandoSecuencia = false;

// Tabla de frecuencias
const int frecuencias[] = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25};
const int pwmValores[]   = {93, 100, 116, 124, 135, 147, 155, 167, 179, 191, 193, 201, 209, 220, 232, 240};
const int numFrecuencias = sizeof(frecuencias) / sizeof(frecuencias[0]);

int obtenerPWMdeFrecuencia(int frecuencia) {
  for (int i = 0; i < numFrecuencias; i++) {
    if (frecuencia == frecuencias[i]) {
      return pwmValores[i];
    }
  }
  return 0;
}

void setup() {
  Serial.begin(115200);
  pinMode(motor1Pin, OUTPUT);
  pinMode(motor2Pin, OUTPUT);
  pinMode(motor3Pin, OUTPUT);

  WiFi.begin(ssid, password);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\n✅ Conectado al WiFi");
  Serial.print(" IP local: ");
  Serial.println(WiFi.localIP());

  server.begin();
}

void loop() {
  WiFiClient client = server.available();
  if (client) {
    Serial.println(" Cliente conectado");
    String request = client.readStringUntil('\r');
    Serial.println(" Solicitud: " + request);
    client.flush();

    if (request.indexOf("/start") != -1) {
      int freqIndex = request.indexOf("frecuencia=");
      int tiempoIndex = request.indexOf("tiempo=");
      int tpmIndex = request.indexOf("tiempoMotor=");

      if (freqIndex != -1 && tiempoIndex != -1 && tpmIndex != -1) {
        int freqEnd = request.indexOf("&", freqIndex);
        String frecuenciaStr = request.substring(freqIndex + 11, freqEnd);
        int frecuencia = frecuenciaStr.toInt();

        int tiempoEnd = request.indexOf("&", tiempoIndex);
        String tiempoStr = request.substring(tiempoIndex + 7, tiempoEnd);
        int minutos = tiempoStr.toInt();

        int tpmEnd = request.indexOf("&", tpmIndex);
        String tiempoMotorStr = (tpmEnd != -1) ? 
          request.substring(tpmIndex + 12, tpmEnd) : 
          request.substring(tpmIndex + 12);
        int tiempoMotorRecibido = tiempoMotorStr.toInt();

        if (frecuencia >= 10 && frecuencia <= 25) {
          pwm = obtenerPWMdeFrecuencia(frecuencia);
          duracionTotal = (unsigned long) minutos * 60UL * 1000UL;
          tiempoPorMotor = constrain(tiempoMotorRecibido, 100, 5000);
          detener = false;
          nuevaSecuencia = true;

          Serial.printf("✅ Frecuencia: %d Hz -> PWM: %d | Total: %lu ms | Por motor: %d ms\n", frecuencia, pwm, duracionTotal, tiempoPorMotor);
        } else {
          Serial.println("⚠️ Frecuencia fuera de rango (10-25 Hz)");
          pwm = 0;
        }
      }
    } else if (request.indexOf("/stop") != -1) {
      detener = true;
      Serial.println("🛑 Secuencia detenida por comando externo");
    }

    client.println("HTTP/1.1 200 OK");
    client.println("Content-Type: text/plain");
    client.println("Connection: close");
    client.println();
    client.println("Datos recibidos");
    client.stop();
  }

  if (nuevaSecuencia) {
    repeticionesTotales = duracionTotal / (tiempoPorMotor * 3); // Tres etapas: (1+4+6), (2+5+7), (3+8)
    repeticionesActuales = 0;
    etapaMotor = 0;
    ultimaAccion = millis();
    ejecutandoSecuencia = true;
    nuevaSecuencia = false;

    Serial.printf("🔁 Ejecutando %d repeticiones (Motores 1+4+6, 2+5+7, 3+8)...\n", repeticionesTotales);
  }

  if (ejecutandoSecuencia && !detener) {
    unsigned long ahora = millis();

    if (ahora - ultimaAccion >= tiempoPorMotor) {
      ultimaAccion = ahora;

      switch (etapaMotor) {
        case 0:
          analogWrite(motor1Pin, pwm);
          analogWrite(motor2Pin, 0);
          analogWrite(motor3Pin, 0);
          Serial.println("➡ Motor 1 activo");
          etapaMotor = 1;
          break;
        case 1:
          analogWrite(motor1Pin, 0);
          analogWrite(motor2Pin, pwm);
          analogWrite(motor3Pin, 0);
          Serial.println("➡ Motor 2 activo");
          etapaMotor = 2;
          break;
        case 2:
          analogWrite(motor1Pin, 0);
          analogWrite(motor2Pin, 0);
          analogWrite(motor3Pin, pwm);
          Serial.println("➡ Motor 3 activo");
          etapaMotor = 0;
          repeticionesActuales++;
          break;
      }

      if (repeticionesActuales >= repeticionesTotales) {
        ejecutandoSecuencia = false;
        Serial.println("✅ Secuencia completada");
        apagarMotores();
      }
    }
  }

  if (detener && ejecutandoSecuencia) {
    Serial.println("🛑 Deteniendo motores...");
    ejecutandoSecuencia = false;
    apagarMotores();
    detener = false;
  }
}

void apagarMotores() {
  analogWrite(motor1Pin, 0);
  analogWrite(motor2Pin, 0);
  analogWrite(motor3Pin, 0);
  Serial.println("🛑 Motores apagados");
}
